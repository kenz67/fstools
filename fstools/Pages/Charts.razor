@page "/charts"
@using BootstrapBlazor.Components
@using Microsoft.AspNetCore.Http.Extensions;
@using Newtonsoft.Json;
@using System.Diagnostics.CodeAnalysis;
@using fstools.Models;
@using System.ComponentModel;
@using fstools.Services;

@inject ChartService ChartSvc;
@inject IJSRuntime jsRuntime;

<PageTitle>Charts</PageTitle>

<h1>Charts</h1>

<Collapse>
    <CollapseItems>
        <CollapseItem Text="Search" TitleColor="Color.Info" IsCollapsed="@ChartSvc.ShowPdf">
            <div class="row g-3">
                <div class="col-2">
                    <BootstrapInput PlaceHolder="ICAO."
                       TValue="string"
                        @bind-Value="@ChartSvc.CurrentIcao"
                       IsAutoFocus="true"
                       IsSelectAllTextOnFocus="true"
                       ShowLabel="true"
                       OnEnterAsync="OnEnterAsync"
                       DisplayText="Enter ICAO" />
                </div>

                <div class="col-2">
                    <Button style="margin-top:27px" 
                        ButtonStyle="ButtonStyle.Round" 
                        Color="Color.Primary" 
                        OnClick="Search">Search</Button>
                </div>
    
                @if (charts != null && charts.ICAO.Count > 0)
                {    
                    <div class="col-8">
                        <ListView aria-hidden="true" TItem="Chart" GroupName="@(p => p.Chart_code)"  Collapsable="true" IsAccordion="true" Items="@charts.ICAO" OnListViewItemClick="SelectedItem">
                             <BodyTemplate>
                                 <Card>
                                     <BodyTemplate>
                                        <Button
                                            ButtonStyle="ButtonStyle.Round"
                                            Color="Color.Primary"
                                            OnClick="() => SelectedItem(context)">
                                            @context.Chart_name
                                        </Button>                                            
                                      </BodyTemplate>
                                 </Card>                     
                            </BodyTemplate>
                        </ListView>
                    </div>
                }
                else if (showChartFox)
                {
                    <div class="row g-3">
                        <div class="row-5">
                            <Button style="margin-top:27px" ButtonStyle="ButtonStyle.Round" 
                                Color="Color.Primary" 
                                OnClick="OpenChartFox">Not found, try in ChartFox (login credentials required)
                            </Button>
                        </div>
                    </div>
                }
            </div>
        </CollapseItem>
    </CollapseItems>
</Collapse>

<div class="row g-3">
    <div class="col-12">
        <section id="chart"/>
        @if (ChartSvc.ShowPdf)
        {
            <PdfReader @ref="PdfReader" FileName="@ChartSvc.Pdf"  Pagemode="EnumPageMode.None" Navpanes="false" StreamMode="true" Height="1100px"/>
        }
    </div>
</div>
<div class="row g-3">
    <div class="col-12">
        Use with caution. The owner of this webpage not responsible for any misuse of outdated charts or other information as it is intended for flight simulation use. Please confirm the cycle dates prior to use of any data.
    </div>
</div>


@code {
    PdfReader PdfReader { get; set; }

    private HttpClient client = new HttpClient();
    private ChartList charts;
    private bool showChartFox = false;

    protected override async Task OnInitializedAsync()
    {
        var pdf = ChartSvc.ShowPdf;
        if (!String.IsNullOrEmpty(ChartSvc.CurrentIcao))
        {
            await Search();
            ChartSvc.ShowPdf = pdf;
        }
    }

    private async Task OnEnterAsync(string icao)
    {
        await PerformSearch(icao);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Search()
    {
        await PerformSearch(ChartSvc.CurrentIcao);
    }

    private async Task PerformSearch(string icao)
    {
        if (string.IsNullOrEmpty(icao?.Trim()))
        {
            return;
        }
        icao = icao.Trim().ToUpper();
        var response = await client.GetStringAsync($"https://api.aviationapi.com/v1/charts?apt={icao}");
        response = response
            .Replace($"\"{icao}\":", "\"ICAO\":")
            .Replace($"\"K{icao}\":", "\"ICAO\":")
            .Replace("\"APD\"", "\"Airport Diagram\"")
            .Replace("\"DP\"", "\"Departures (SID)\"")
            .Replace("\"HOT\"", "\"Hot Spots\"")
            .Replace("\"IAP\"", "\"Approaches\"")
            .Replace("\"MIN\"", "\"Minimums\"")
            .Replace("\"STAR\"", "\"Arrivals (STAR)\"")
            .Replace("\"DAU\"", "\"Depature AAUP\"")
            .Replace("\"LAH\"", "\"Land and Hold Short\"")
            ;
        charts = JsonConvert.DeserializeObject<ChartList>(response);

        if (charts.ICAO.Count.Equals(0))
        {
            showChartFox = true;           
        }

        ChartSvc.ShowPdf = false;
        //skyvector integration, only US as well :(
        //Scrape s = new Scrape();
        //charts = await s.TestScrape(icao);
        //ChartSvc.ShowPdf = false;
    }

    private async Task SelectedItem(Chart chart)
    {
        ChartSvc.Pdf = chart.Pdf_path;
        //ChartSvc.ShowPdf = true;
        if (PdfReader != null)
        {
            //for some reason, it is one behind so need to refresh twice
            await PdfReader!.Refresh();   
            await InvokeAsync(StateHasChanged);
            await PdfReader!.Refresh();
        }

        await InvokeAsync(StateHasChanged);   
        //await jsRuntime.InvokeVoidAsync("scrollIntoView", "chart");
        await jsRuntime.InvokeVoidAsync("blazorOpen", chart.Pdf_path, "chart");
    }

    public async Task OpenChartFox()
    {
        var url = $"https://chartfox.org/{ChartSvc.CurrentIcao}";
        await jsRuntime.InvokeVoidAsync("blazorOpen", url, "cf");
    }
}
