@page "/charts"

@using Newtonsoft.Json;
@using fstools.Models;
@using fstools.Services;
@using BootstrapBlazor.Components


@inject ChartService ChartSvc;
@inject BrowserService BrowserSvc;
@inject IJSRuntime jsRuntime;
@inject WeatherService WeatherSvc;
@inject IcaoService icaoService;

<PageTitle>Charts</PageTitle>

<h1>Charts</h1>


<Collapse>
    <CollapseItems>
        <CollapseItem Text="Search" TitleColor="Color.Info" IsCollapsed="@ChartSvc.ShowPdf">
            <div class="row g-3">
                @if (icaoService.IcaoList != null)
                {
                    <div class="col-2">
                        <AutoComplete 
                            @bind-Value="@ChartSvc.CurrentIcao" 
                            Items="icaoService.IcaoList" 
                            IsLikeMatch="true" 
                            IgnoreCase="true" 
                            DisplayCount="7"
                            OnEnterAsync="OnEnterAsync"
                            ShowDropdownListOnFocus="false"                                   
                            PlaceHolder="ICAO"
                            IsSelectAllTextOnFocus="true" 
                        />
                    </div>

                    <div class="col-2">
                    <Button 
                        ButtonStyle="ButtonStyle.Round" 
                        Color="Color.Primary" 
                        OnClick="Search">Search</Button>
                    </div>
                }
                else
                {
                    <div class="col-2">
                        <BootstrapInput PlaceHolder="ICAO."
                            TValue="string"
                            @bind-Value="@ChartSvc.CurrentIcao"
                            IsAutoFocus="true"
                            IsSelectAllTextOnFocus="true"
                            ShowLabel="true"
                            OnEnterAsync="OnEnterAsync"
                            DisplayText="Enter ICAO" />
                    </div>

                    <div class="col-2">
                        <Button style="margin-top:27px"
                                ButtonStyle="ButtonStyle.Round"
                                Color="Color.Primary"
                                OnClick="Search">
                            Search
                        </Button>
                    </div>
                }

                @if (charts != null && charts.ICAO.Count > 0)
                {    
                    <div class="col-8">
                        <ListView aria-hidden="true" 
                                TItem="Chart" 
                                GroupName="@(p => p.Chart_code)"  
                                Collapsable="true"
                                IsAccordion="true" Items="@charts.ICAO">
                             <BodyTemplate>
                                 <Card>                                                                          
                                     <BodyTemplate>
                                        <Button
                                            ButtonStyle="ButtonStyle.Round"
                                            Color="Color.Primary"
                                            OnClick="() => SelectedItem(context)">
                                                @context.Chart_name
                                        </Button>                                        
                                    </BodyTemplate>
                                 </Card>                     
                            </BodyTemplate>
                        </ListView>
                    </div>
                }
                else if (showChartFox)
                {
                    <div class="row g-3">
                        <div class="row-5">
                            <Button style="margin-top:27px" ButtonStyle="ButtonStyle.Round" 
                                Color="Color.Primary" 
                                OnClick="OpenChartFox">Not found, try in ChartFox (login credentials required)
                            </Button>
                        </div>
                    </div>
                }
            </div>
        </CollapseItem>
    </CollapseItems>
</Collapse>

<div class="row g-3">
    <div class="col-12">
        <section id="chart"/>
        @if (BrowserSvc.CanDisplayPdf() && ChartSvc.ShowPdf)
        {
            <PdfReader @ref="PdfReader" FileName="@ChartSvc.Pdf"  Pagemode="EnumPageMode.None" Navpanes="false" StreamMode="true" Height="1100px"/>
        }
    </div>
</div>
<div class="row g-3">
    <div class="col-12">
        Use with caution. The owner of this webpage not responsible for any misuse of outdated charts or other information as it is intended for flight simulation use.
    </div>
</div>


@code {
    PdfReader PdfReader { get; set; }

    private HttpClient client = new HttpClient();
    private ChartList charts;
    private bool showChartFox = false;

    protected override async Task OnInitializedAsync()
    {
        var pdf = ChartSvc.ShowPdf;
        if (!String.IsNullOrEmpty(ChartSvc.CurrentIcao))
        {
            await Search();
            ChartSvc.ShowPdf = pdf;
        }
    }

    private FormItemValidator OnValidate()
    {
        return null;
    }

    private async Task OnEnterAsync(string icao)
    {
        if (icao.Equals(".") && !String.IsNullOrEmpty(WeatherSvc.ICAO))
        {
            icao = WeatherSvc.ICAO;
            ChartSvc.CurrentIcao = icao;
        }

        ChartSvc.CurrentIcao = icao.ToUpper();

        await PerformSearch(ChartSvc.CurrentIcao);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Search()
    {
        ChartSvc.CurrentIcao = ChartSvc.CurrentIcao.ToUpper();
        await PerformSearch(ChartSvc.CurrentIcao);
    }

    private async Task PerformSearch(string icao)
    {
        ChartSvc.ShowPdf = false;
        if (string.IsNullOrEmpty(icao?.Trim()))
        {
            return;
        }

        var response = await client.GetStringAsync($"https://api.aviationapi.com/v1/charts?apt={icao}");
        response = response
            .Replace($"\"{icao}\":", "\"ICAO\":")
            .Replace($"\"K{icao}\":", "\"ICAO\":")
            .Replace("\"APD\"", "\"Airport Diagram\"")
            .Replace("\"DP\"", "\"Departures (SID)\"")
            .Replace("\"HOT\"", "\"Hot Spots\"")
            .Replace("\"IAP\"", "\"Approaches\"")
            .Replace("\"MIN\"", "\"Minimums\"")
            .Replace("\"STAR\"", "\"Arrivals (STAR)\"")
            .Replace("\"DAU\"", "\"Depature AAUP\"")
            .Replace("\"LAH\"", "\"Land and Hold Short\"")
            ;
        charts = JsonConvert.DeserializeObject<ChartList>(response);

        if (charts.ICAO.Count.Equals(0))
        {
            showChartFox = true;           
        }

        //skyvector integration, only US as well :(
        //Scrape s = new Scrape();
        //charts = await s.TestScrape(icao);
        //ChartSvc.ShowPdf = false;
    }

    private async Task SelectedItem(Chart chart)
    {
        ChartSvc.Pdf = chart.Pdf_path;

        if (BrowserSvc.CanDisplayPdf())
        {
            ChartSvc.ShowPdf = true;
            if (PdfReader != null)
            {
                //for some reason, it is one behind so need to refresh twice
                await PdfReader!.Refresh();
                await InvokeAsync(StateHasChanged);
                await PdfReader!.Refresh();
            }

            await InvokeAsync(StateHasChanged);
            await jsRuntime.InvokeVoidAsync("scrollIntoView", "chart");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("blazorOpen", chart.Pdf_path, chart.Chart_name.Replace(" ", String.Empty));
        }
    }

    public async Task OpenChartFox()
    {
        var url = $"https://chartfox.org/{ChartSvc.CurrentIcao}";
        await jsRuntime.InvokeVoidAsync("blazorOpen", url, "cf");
    }
}
