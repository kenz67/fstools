@page "/weather"
@using BootstrapBlazor.Components
@using Microsoft.AspNetCore.Http.Extensions;
@using Newtonsoft.Json;
@using System.Diagnostics.CodeAnalysis;
@using fstools.Models;
@using System.ComponentModel;
@using fstools.Services;

@inject WeatherService WxSvc;
@inject IJSRuntime jsRuntime;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<Collapse>
    <CollapseItems>
        <CollapseItem Text="Search" TitleColor="Color.Info" IsCollapsed="false">
            <div class="row g-3">
                <div class="col-2">
                    <BootstrapInput PlaceHolder="ICAO."
                       TValue="string"
                                    @bind-Value="@WxSvc.CurrentIcao"
                       IsAutoFocus="true"
                       IsSelectAllTextOnFocus="true"
                       ShowLabel="true"
                       OnEnterAsync="OnEnterAsync"
                       DisplayText="Enter ICAO" />
                </div>

                <div class="col-2">
                    <Button style="margin-top:27px" 
                        ButtonStyle="ButtonStyle.Round" 
                        Color="Color.Primary" 
                        OnClick="Search">Search</Button>
                </div>   
             </div>
        </CollapseItem>
    </CollapseItems>
</Collapse>
@if (WxSvc.CurrentWeather != null)
{
    <div class="row g-3" style="margin-top:20px">
    <div class="col-5">
        <MetarComponent ICAO="@WxSvc.CurrentIcao" WeatherInfo="@WxSvc.CurrentWeather" />
        </div>
    </div>
}

@*<div class="row g-3">
    <div class="col-12">
        <section id="chart"/>
        @if (WxSvc.CurrentWeather != null)
        {
            <Label>Weather</Label>
        }
    </div>
</div>*@
<div class="row g-3">
    <div class="col-12">
        Use with caution. The owner of this webpage not responsible for any misuse of outdated charts or other information as it is intended for flight simulation use. Please confirm the cycle dates prior to use of any data.
    </div>
</div>


@code {
    private HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        WxSvc.CurrentIcao = "koxc";
    }

    private async Task OnEnterAsync(string icao)
    {
        await PerformSearch(icao);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Search()
    {
        await PerformSearch(WxSvc.CurrentIcao);
    }

    private async Task PerformSearch(string icao)
    {
        if (string.IsNullOrEmpty(icao?.Trim()))
        {
            return;
        }
        icao = icao.Trim().ToUpper();
        try
        {
            var response = await client.GetStringAsync($"https://api.aviationapi.com/v1/weather/metar?apt={icao}");
            response = response
                .Replace($"\"{icao}\":", "\"WeatherData\":")
                .Replace($"\"K{icao}\":", "\"WeatherData\":")
                ;

            WxSvc.CurrentWeather = JsonConvert.DeserializeObject<WeatherInfo>(response);
            WxSvc.CurrentIcao = icao;
        }
        catch (HttpRequestException wex)
        {
            //TODO Handle
            int i = 0;
            i++;
        }

        await InvokeAsync(StateHasChanged);
        //TODO Handle multiple comma separated
        //Get TAGF as well as Metar?
    }
}
