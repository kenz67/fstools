@page "/weather"
@using BootstrapBlazor.Components
@using Newtonsoft.Json;
@using fstools.Models;
@using fstools.Services;

@inject WeatherService WxSvc;
@inject ChartService ChartSvc;
@inject IJSRuntime jsRuntime;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<Collapse>
    <CollapseItems>
        <CollapseItem Text="Search" TitleColor="Color.Info" IsCollapsed="false">
            <div class="row g-3">
                <div class="col-2">
                    <BootstrapInput PlaceHolder="ICAO."
                       TValue="string"
                        @bind-Value="@WxSvc.ICAO"
                       IsAutoFocus="true"
                       IsSelectAllTextOnFocus="true"
                       ShowLabel="true"
                       OnEnterAsync="OnEnterAsync"
                       DisplayText="Enter ICAO" />
                </div>

                <div class="col-2">
                    <Button style="margin-top:27px" 
                        ButtonStyle="ButtonStyle.Round" 
                        Color="Color.Primary" 
                        OnClick="Search">Search</Button>
                </div>   
             </div>
        </CollapseItem>
    </CollapseItems>
</Collapse>
@if (!String.IsNullOrEmpty(WxSvc.WxInfo?.ICAO))
{
    <div class="row g-3" style="margin-top:20px">
    <div class="col-lg-4 col-12">
        <MetarComponent ICAO="@WxSvc?.WxInfo?.ICAO" WeatherInfo="@WxSvc?.WxInfo?.Metar" />
    </div>
      
        <div class="col-lg-4 col-12">
            <TafComponent ICAO="@WxSvc?.WxInfo?.ICAO" WeatherInfo="@WxSvc?.WxInfo?.Taf" />
        </div>
    </div>
}

<div class="row g-3">
    <br />
    <div class="col-12">
        Use with caution. The owner of this webpage not responsible for any misuse of outdated charts or other information as it is intended for flight simulation use. Please confirm the cycle dates prior to use of any data.
    </div>
</div>


@code {
    private HttpClient client = new HttpClient();

    private async Task OnEnterAsync(string icao)
    {
        await PerformSearch(icao);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Search()
    {
        await PerformSearch(WxSvc.ICAO);
    }

    private async Task PerformSearch(string icao)
    {
        if (icao.Equals("."))
        {
            icao = ChartSvc.CurrentIcao;
        }
        WxSvc.ICAO = icao;
        WxSvc.WxInfo = new WeatherInfo();
        if (string.IsNullOrEmpty(icao?.Trim()))
        {
            return;
        }
        icao = icao.Trim().ToUpper();
        try
        {
            WxSvc.WxInfo.ICAO = icao;
            var response = await client.GetStringAsync($"https://api.aviationapi.com/v1/weather/metar?apt={icao}");
            response = response
                .Replace($"\"{icao}\":", "\"WeatherData\":")
                .Replace($"\"K{icao}\":", "\"WeatherData\":")
                ;

            WxSvc.WxInfo.Metar = JsonConvert.DeserializeObject<MetarInfo>(response);
        }
        //catch (HttpRequestException wex)
        //{            
        //    WxSvc.CurrentWeather = null;
        //}
        catch
        {
            WxSvc.WxInfo.Metar = null;
        }

        try
        {
            WxSvc.WxInfo.ICAO = icao;
            var response = await client.GetStringAsync($"https://api.aviationapi.com/v1/weather/taf?apt={icao}");
            response = response
                .Replace($"\"{icao}\":", "\"TafData\":")
                .Replace($"\"K{icao}\":", "\"TafData\":")
                ;

            WxSvc.WxInfo.Taf = JsonConvert.DeserializeObject<TafInfo>(response);    
        }
        //catch (HttpRequestException wex)
        //{
        //    WxSvc.CurrentWeather = null;
        //}
        catch
        {
            WxSvc.WxInfo.Taf = null;
        }

        await InvokeAsync(StateHasChanged);
        //Get TAF as well as Metar?
    }
    }
