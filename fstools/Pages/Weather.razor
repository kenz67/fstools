@page "/weather"
@using BootstrapBlazor.Components
@using Newtonsoft.Json;
@using fstools.Models;
@using fstools.Services;

@inject WeatherService WxSvc;
@inject ChartService ChartSvc;
@inject IcaoService icaoService;
@inject IJSRuntime jsRuntime;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<Collapse>
    <CollapseItems>
        <CollapseItem Text="Search" TitleColor="Color.Info" IsCollapsed="false">
            <div class="row g-3">
                @if (icaoService.IcaoList != null)
                {
                    <div class="col-3">
                        <AutoComplete @bind-Value="@WxSvc.ICAO"
                                      Items="icaoService.IcaoList"
                                      IsLikeMatch="true"
                                      IgnoreCase="true"
                                      DisplayCount="7"
                                      OnEnterAsync="OnEnterAsync"
                                      ShowDropdownListOnFocus="false"
                                      PlaceHolder="ICAO"
                                      IsSelectAllTextOnFocus="true" />
                    </div>

                    <div class="col-2">
                        <Button ButtonStyle="ButtonStyle.Round"
                                Color="Color.Primary"
                                OnClick="Search">
                            Search
                        </Button>
                    </div>
                }
                else
                {
                    <div class="col-2">
                        <BootstrapInput PlaceHolder="ICAO."
                            TValue="string"
                            @bind-Value="@WxSvc.ICAO"
                            IsAutoFocus="true"
                            IsSelectAllTextOnFocus="true"
                            ShowLabel="true"
                            OnEnterAsync="OnEnterAsync"
                            DisplayText="Enter ICAO" />
                    </div>

                    <div class="col-2">
                        <Button style="margin-top:27px"
                                ButtonStyle="ButtonStyle.Round"
                                Color="Color.Primary"
                                OnClick="Search">
                            Search
                        </Button>
                    </div>

                }
            </div>
        </CollapseItem>
    </CollapseItems>
</Collapse>
@if (!String.IsNullOrEmpty(WxSvc.WxInfo?.ICAO))
{
    <div class="row g-3" style="margin-top:20px">
    <div class="col-lg-4 col-12">
        <MetarComponent ICAO="@WxSvc?.WxInfo?.ICAO" WeatherInfo="@WxSvc?.WxInfo?.Metar" />
    </div>
      
        <div class="col-lg-4 col-12">
            <TafComponent ICAO="@WxSvc?.WxInfo?.ICAO" WeatherInfo="@WxSvc?.WxInfo?.Taf" />
        </div>
    </div>
}

<div class="row g-3">
    <br />
    <div class="col-12">
        Use with caution. The owner of this webpage not responsible for any misuse of outdated charts or other information as it is intended for flight simulation use.
    </div>
</div>


@code {
    private HttpClient client = new HttpClient();

    private async Task OnEnterAsync(string icao)
    {
        await PerformSearch(icao);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Search()
    {
        await PerformSearch(WxSvc.ICAO);
    }

    private async Task PerformSearch(string icao)
    {
        if (icao.Equals(".") && !String.IsNullOrEmpty(ChartSvc.CurrentIcao))
        {
            icao = ChartSvc.CurrentIcao;
        }
        WxSvc.ICAO = icao;
        WxSvc.WxInfo = new WeatherInfo();
        if (string.IsNullOrEmpty(icao?.Trim()))
        {
            return;
        }
        icao = icao.Trim().ToUpper();
        try
        {
            WxSvc.WxInfo.ICAO = icao;
            var response = await client.GetStringAsync($"https://aviationweather.gov/api/data/metar?ids={icao}&format=json");

            response = response[1..^1];
            response = $"{{ \"WeatherData\": {response}  }}";
            response = response
                .Replace($"\"base\":", "\"Base\":")

                //    .Replace($"\"{icao}\":", "\"WeatherData\":")
                //    .Replace($"\"K{icao}\":", "\"WeatherData\":")
                ;          

            WxSvc.WxInfo.Metar = JsonConvert.DeserializeObject<MetarInfo>(response);

        }
        //catch (HttpRequestException wex)
        //{            
        //    WxSvc.CurrentWeather = null;
        //}
        catch
        {
            WxSvc.WxInfo.Metar = null;
        }

        try
        {
            WxSvc.WxInfo.ICAO = icao;
            var responseJson = await client.GetStringAsync($"https://aviationweather.gov/api/data/taf?ids={icao}&format=json");
            responseJson = responseJson[1..^1];
            responseJson = $"{{ \"TafData\": {responseJson}  }}";

            var response = await client.GetStringAsync($"https://aviationweather.gov/api/data/taf?ids={icao}");
            //response = response
            //    .Replace($"\"{icao}\":", "\"TafData\":")
            //    .Replace($"\"K{icao}\":", "\"TafData\":")
            //    ;

            WxSvc.WxInfo.Taf = JsonConvert.DeserializeObject<TafInfo>(responseJson);
            WxSvc.WxInfo.Taf.TafData.Line_by_line = new List<string>();
            foreach (var line in response.Split("\n"))
            {
                if (line != String.Empty)
                    WxSvc.WxInfo.Taf.TafData.Line_by_line.Add(line);
            }
            WxSvc.WxInfo.Taf.TafData.Line_by_line.RemoveAt(0);
        }
        //catch (HttpRequestException wex)
        //{
        //    WxSvc.CurrentWeather = null;
        //}
        catch
        {
            WxSvc.WxInfo.Taf = null;
        }

        await InvokeAsync(StateHasChanged);
        //Get TAF as well as Metar?
    }
    }
